# Function to add files to Lint
function addFilesToLint {
    filename=""
    count=$2
    for item in $1
    do
      if [[ $item == *".swift"* ]]; then
        filename+="$item"
        export SCRIPT_INPUT_FILE_$count="$filename"
        count=$((count + 1))
        filename=""
      else
        filename+="$item "
      fi
    done
}
# Finding SwiftLint
LINT=$(which swiftlint)
if [[ -e "${LINT}" ]]; then
  echo "SwiftLint Start..."
else
  echo "SwiftLint does not exist, please download from https://github.com/realm/SwiftLint"
  exit 1
fi
count=0
# Getting files which are in commit and haven't been pushed yet
targets=$(git diff --stat --cached  --name-only $(git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)) | grep -F ".swift")
addFilesToLint "${targets[0]}" $count
export -p | grep SCRIPT_INPUT_FILE
export SCRIPT_INPUT_FILE_COUNT=$count
RESULT=$($LINT lint --quiet --use-script-input-files)
if [ "$RESULT" == '' ]; then
  printf "\e[32mSwiftLint Finished.\e[39m\n"
else
  echo ""
  printf "\e[41mSwiftLint Failed.\e[49m Please check below:\n"
while read -r line; do
FILEPATH=$(echo $line | cut -d : -f 1)
    L=$(echo $line | cut -d : -f 2)
    C=$(echo $line | cut -d : -f 3)
    TYPE=$(echo $line | cut -d : -f 4 | cut -c 2-)
    MESSAGE=$(echo $line | cut -d : -f 5 | cut -c 2-)
    DESCRIPTION=$(echo $line | cut -d : -f 6 | cut -c 2-)
    if [ "$TYPE" == 'error' ]; then
      printf "\n  \e[31m$TYPE\e[39m\n"
    else
      printf "\n  \e[33m$TYPE\e[39m\n"
    fi
    printf "    \e[90m$FILEPATH:$L:$C\e[39m\n"
    printf "    $MESSAGE - $DESCRIPTION\n"
  done <<< "$RESULT"
printf "\PUSH ABORTED. Please fix them before pushing your code.\n"
exit 1
fi